import os
import io
import json
import re
from typing import Tuple, Optional

import streamlit as st
import requests
from bs4 import BeautifulSoup
from docx import Document


# =============== Page config ===============
st.set_page_config(page_title="Ryne ‚Äî AI Score + –ß–∏—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—å/HTML", layout="wide")
st.title("–ì—É–º–∞–Ω–∏–∑–∞—Ü–∏—è –¥–ª—è —á–∏—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç–∏ –∏ HTML + AI Score (Ryne)")

st.caption(
    "‚ö†Ô∏è –≠—Ç–∏—á–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–æ –¥–ª—è –æ–±—Ö–æ–¥–∞ AI-–¥–µ—Ç–µ–∫—Ç–æ—Ä–æ–≤. "
    "–û—Ü–µ–Ω–∫–∞ AI-—Å–ª–µ–¥–æ–≤ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —á–µ—Ä–µ–∑ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π API Ryne, –∞ —É–ª—É—á—à–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ ‚Äî –ª–æ–∫–∞–ª—å–Ω–æ –¥–ª—è —á–∏—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç–∏."
)


# =============== Helpers ===============
def read_uploaded_text(file) -> Tuple[str, Optional[str]]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç –∏ —Ç–∏–ø ('html' –∏–ª–∏ 'text') –∏–∑ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞."""
    if file is None:
        return "", None
    name = file.name.lower()
    if name.endswith((".html", ".htm")):
        data = file.read().decode("utf-8", errors="ignore")
        return data, "html"
    if name.endswith(".txt") or name.endswith(".md"):
        data = file.read().decode("utf-8", errors="ignore")
        return data, "text"
    if name.endswith(".docx"):
        doc = Document(file)
        text = "\n".join(p.text for p in doc.paragraphs)
        return text, "text"
    # .doc –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º (–Ω—É–∂–Ω—ã —Å–∏—Å—Ç–µ–º–Ω—ã–µ –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä—ã)
    return "", None


def html_to_visible_text(html: str) -> str:
    try:
        soup = BeautifulSoup(html, "html.parser")
        return soup.get_text("\n")
    except Exception:
        return html


def improve_readability(text: str) -> str:
    """–ü—Ä–æ—Å—Ç–∞—è –ª–æ–∫–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è —á–∏—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç–∏ (–±–µ–∑ –æ–±—Ö–æ–¥–∞ –¥–µ—Ç–µ–∫—Ç–æ—Ä–æ–≤)."""
    # 1) –ø—Ä–æ–±–µ–ª—ã
    t = re.sub(r"[ \t]+", " ", text)
    # 2) –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Ç–∏—Ä–µ
    t = t.replace(" - ", " ‚Äî ")
    # 3) —Ä–∞–∑–±–∏–µ–Ω–∏–µ –¥–ª–∏–Ω–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
    sentences = re.split(r"(?<=[.!?])\s+", t)
    lines = []
    for s in sentences:
        s = s.strip()
        if not s:
            continue
        if len(s) > 240:
            parts = re.split(r",\s+", s)
            buf, cur = [], 0
            for p in parts:
                if cur + len(p) > 120:
                    lines.append(", ".join(buf).strip() + ".")
                    buf, cur = [p], len(p)
                else:
                    buf.append(p)
                    cur += len(p)
            if buf:
                lines.append(", ".join(buf).strip() + ".")
        else:
            lines.append(s)
    t = "\n".join(lines)
    # 4) –ª–∏—à–Ω–∏–µ –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
    t = re.sub(r"\n{3,}", "\n\n", t).strip()
    return t


def text_to_html(text: str) -> str:
    soup = BeautifulSoup("", "html.parser")
    root = soup.new_tag("div", **{"class": "ryne-output"})
    for para in text.split("\n"):
        if not para.strip():
            continue
        p = soup.new_tag("p")
        p.string = para.strip()
        root.append(p)
    return str(root)


def call_ryne_ai_score(text: str, user_id_api_key: str) -> dict:
    """–û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –ø—É–±–ª–∏—á–Ω—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç Ryne –¥–ª—è –æ—Ü–µ–Ω–∫–∏ AI-—Å–ª–µ–¥–æ–≤."""
    url = "https://ryne.ai/api/ai-score"
    headers = {"Content-Type": "application/json"}
    payload = {"text": text, "user_id": user_id_api_key}
    resp = requests.post(url, headers=headers, json=payload, timeout=60)

    # –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
    with st.expander("–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –æ—Ç–≤–µ—Ç–∞ (AI Score)"):
        st.write(
            {
                "status": resp.status_code,
                "headers": dict(resp.headers),
                "preview": resp.text[:1200],
            }
        )

    resp.raise_for_status()
    return resp.json()


# =============== Layout ===============
left, right = st.columns([2.2, 1.0])

with left:
    st.subheader("–í—Å—Ç–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –∏–ª–∏ HTML")
    input_text = st.text_area(
        "–í–∞—à —Ç–µ–∫—Å—Ç –∏–ª–∏ HTML‚Ä¶", height=300, placeholder="–í—Å—Ç–∞–≤—å—Ç–µ —Å—é–¥–∞ —Ç–µ–∫—Å—Ç/HTML‚Ä¶"
    )
    st.caption("‚Ä¶–∏–ª–∏ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª (.html, .htm, .txt, .md, .docx)")
    up_file = st.file_uploader(
        "Drag & drop / Browse", type=["html", "htm", "txt", "md", "docx"]
    )

uploaded_text, uploaded_kind = ("", None)
if up_file is not None:
    uploaded_text, uploaded_kind = read_uploaded_text(up_file)

source_text = uploaded_text or input_text

with right:
    st.subheader("–í—ã—Ö–æ–¥–Ω–æ–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∫–∏")
    out_fmt = st.radio("–§–æ—Ä–º–∞—Ç –≤—ã–¥–∞—á–∏", options=["HTML", "Plain/Markdown"], index=0)
    download_as = st.selectbox("–°–∫–∞—á–∞—Ç—å –∫–∞–∫", options=["HTML", "TXT", "MD"], index=0)


# =============== Ryne AI Score ===============
st.markdown("---")
st.header("üîé –ü—Ä–æ–≤–µ—Ä–∫–∞ AI-—Å–ª–µ–¥–æ–≤ —á–µ—Ä–µ–∑ Ryne (–æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π /api/ai-score)")
api_key_body = st.text_input(
    "Ryne API key (user_id)",
    type="password",
    help="–ö–ª—é—á –ø–µ—Ä–µ–¥–∞—ë—Ç—Å—è –≤ —Ç–µ–ª–µ –∑–∞–ø—Ä–æ—Å–∞ –∫–∞–∫ user_id.",
)
col_a, col_b = st.columns([1, 4])
with col_a:
    run_score = st.button("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å AI-score", type="primary")

if run_score:
    if not source_text.strip():
        st.warning("–ù—É–∂–Ω–æ –≤—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç/HTML –∏–ª–∏ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª.")
    elif not api_key_body.strip():
        st.warning("–ù—É–∂–µ–Ω Ryne API key (user_id).")
    else:
        # –ï—Å–ª–∏ –Ω–∞ –≤—Ö–æ–¥–µ HTML ‚Äî –æ—Ü–µ–Ω–∏–≤–∞–µ–º –≤–∏–¥–∏–º—ã–π —Ç–µ–∫—Å—Ç
        text_for_check = (
            html_to_visible_text(source_text)
            if ("<" in source_text and ">" in source_text)
            else source_text
        )
        try:
            data = call_ryne_ai_score(text_for_check, api_key_body)
            st.success("–û—Ü–µ–Ω–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞")

            # –ö—Ä–∞—Å–∏–≤—ã–π –≤—ã–≤–æ–¥ —Å–≤–æ–¥–∫–∏
            ai_score = data.get("aiScore")
            classification = data.get("classification")
            details = data.get("details") or {}
            analysis = details.get("analysis") or {}
            sentences = details.get("sentences") or []

            cols = st.columns(3)
            cols[0].metric("aiScore", ai_score)
            cols[1].metric("classification", classification)
            cols[2].metric("risk", analysis.get("risk"))

            if analysis:
                st.info(f"–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: {analysis.get('suggestion', '‚Äî')}")

            if sentences:
                st.subheader("–ü–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º:")
                for s in sentences:
                    st.write(
                        f"‚Ä¢ **{s.get('text','')}** ‚Üí aiProbability: {s.get('aiProbability')}, isAI: {s.get('isAI')}"
                    )
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ Ryne: {e}")


# =============== Local readability/HTML ===============
st.markdown("---")
st.header("‚ú® –£–ª—É—á—à–µ–Ω–∏–µ —á–∏—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç–∏ –∏ HTML (–ª–æ–∫–∞–ª—å–Ω–æ)")
run_local = st.button("–ü–µ—Ä–µ–ø–∏—Å–∞—Ç—å –¥–ª—è —á–∏—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç–∏ + HTML")

if run_local:
    if not source_text.strip():
        st.warning("–ù—É–∂–Ω–æ –≤—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç/HTML –∏–ª–∏ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª.")
    else:
        # –ï—Å–ª–∏ –ø—Ä–∏—à—ë–ª HTML ‚Äî –∏–∑–≤–ª–µ–∫–∞–µ–º –≤–∏–¥–∏–º—ã–π —Ç–µ–∫—Å—Ç –∏ —É–ª—É—á—à–∞–µ–º –µ–≥–æ.
        base_text = (
            html_to_visible_text(source_text)
            if ("<" in source_text and ">" in source_text)
            else source_text
        )
        improved = improve_readability(base_text)

        if out_fmt == "HTML":
            final_html = text_to_html(improved)
            st.success("–ì–æ—Ç–æ–≤–æ. –ù–∏–∂–µ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä HTML.")
            st.components.v1.html(final_html, height=420, scrolling=True)
            # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ
            st.download_button(
                "‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å HTML",
                data=final_html.encode("utf-8"),
                file_name="result.html",
                mime="text/html",
            )
            st.download_button(
                "‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å TXT",
                data=improved.encode("utf-8"),
                file_name="result.txt",
                mime="text/plain",
            )
        else:
            st.success("–ì–æ—Ç–æ–≤–æ. –ù–∏–∂–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç (Plain/Markdown).")
            st.text_area("–†–µ–∑—É–ª—å—Ç–∞—Ç", value=improved, height=300)
            # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ
            st.download_button(
                "‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å TXT",
                data=improved.encode("utf-8"),
                file_name="result.txt",
                mime="text/plain",
            )
            st.download_button(
                "‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å MD",
                data=improved.encode("utf-8"),
                file_name="result.md",
                mime="text/markdown",
            )
