import os
import io
import json
from typing import Optional, Tuple

import streamlit as st
import requests

from bs4 import BeautifulSoup  # html –æ–±—Ä–∞–±–æ—Ç–∫–∞
from docx import Document      # —á—Ç–µ–Ω–∏–µ .docx

# ---------------------------
# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
# ---------------------------
st.set_page_config(page_title="Ryne Humanizer ‚Äî —Ç–µ–∫—Å—Ç/HTML", layout="wide")

st.title("–ì—É–º–∞–Ω–∏–∑–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ –∏ HTML (—á–µ—Ä–µ–∑ Ryne)")

# --- –°–∞–π–¥–±–∞—Ä: –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ API ---
with st.sidebar:
    st.header("API Ryne")
    st.caption("–≠—Ç–∏ –ø–æ–ª—è –Ω—É–∂–Ω—ã, —á—Ç–æ–±—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –º–æ–≥–ª–æ –¥–µ—Ä–Ω—É—Ç—å –≤–∞—à Ryne-—ç–Ω–¥–ø–æ–∏–Ω—Ç.")
    api_base = st.text_input("API Base URL", value=os.environ.get("RYNE_API_BASE", "https://ryne.ai"))
    endpoint = st.text_input("Endpoint path", value=os.environ.get("RYNE_HUMANIZE_PATH", "/humanize"))
    api_key = st.text_input("API Key (Bearer)", value=os.environ.get("RYNE_API_KEY", ""), type="password")
    st.caption("‚ö†Ô∏è –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∏–∂–µ ‚Äî –ø—Ä–∏–º–µ—Ä. –ü—Ä–æ–≤–µ—Ä—å —É Ryne —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–π —Ñ–æ—Ä–º–∞—Ç.")
    req_text_field = st.text_input("JSON-–ø–æ–ª–µ –¥–ª—è —Ç–µ–∫—Å—Ç–∞", value=os.environ.get("RYNE_TEXT_FIELD", "text"))
    req_format_field = st.text_input("JSON-–ø–æ–ª–µ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∞", value=os.environ.get("RYNE_FORMAT_FIELD", "format"))
    req_extra_json = st.text_area(
        "–î–æ–ø. JSON-–ø–æ–ª—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)", 
        value=os.environ.get("RYNE_EXTRA_JSON", ""),
        placeholder='–ù–∞–ø—Ä.: {"temperature": 0.3, "style": "neutral"}'
    )

# --- –ö–æ–ª–æ–Ω–∫–∏ –∫–∞–∫ –Ω–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–µ ---
col_left, col_right = st.columns([2.2, 1.0])

# ---------------------------
# –í–≤–æ–¥: —Ç–µ–∫—Å—Ç/HTML –∏–ª–∏ —Ñ–∞–π–ª
# ---------------------------
with col_left:
    st.subheader("–í—Å—Ç–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –∏–ª–∏ HTML")
    input_text = st.text_area(
        "–í—Å—Ç–∞–≤—å—Ç–µ —Å—é–¥–∞ –≤–∞—à —Ç–µ–∫—Å—Ç / HTML. –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–µ—Ä–Ω—ë—Ç Ryne (/humanize).",
        height=300,
        placeholder="–í–∞—à —Ç–µ–∫—Å—Ç –∏–ª–∏ HTML‚Ä¶",
    )

    st.caption("‚Ä¶–∏–ª–∏ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª (.html, .htm, .txt, .md, .docx)")
    up_file = st.file_uploader("Drag & drop / Browse", type=["html", "htm", "txt", "md", "docx"])

def read_uploaded_text(file) -> Tuple[str, Optional[str]]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (—Ç–µ–∫—Å—Ç, –¥–µ—Ç–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π_—Ç–∏–ø) –∏–∑ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞."""
    if file is None:
        return "", None
    name = file.name.lower()
    if name.endswith((".html", ".htm")):
        data = file.read().decode("utf-8", errors="ignore")
        return data, "html"
    if name.endswith(".txt") or name.endswith(".md"):
        data = file.read().decode("utf-8", errors="ignore")
        return data, "text"
    if name.endswith(".docx"):
        doc = Document(file)
        text = "\n".join(p.text for p in doc.paragraphs)
        return text, "text"
    # –Ω–∞ .doc –ª—É—á—à–µ –Ω–µ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞—Ç—å ‚Äî –æ—Ñ–ª–∞–π–Ω-–∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä–æ–≤ –±–µ–∑ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –Ω–µ—Ç
    return "", None

uploaded_text = ""
uploaded_kind = None
if up_file is not None:
    uploaded_text, uploaded_kind = read_uploaded_text(up_file)

# –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏ –≤—Å—Ç–∞–≤–∏–ª —Ç–µ–∫—Å—Ç, –∏ –∑–∞–≥—Ä—É–∑–∏–ª —Ñ–∞–π–ª ‚Äî –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç —É —Ñ–∞–π–ª–∞
source_text = uploaded_text or input_text

# ---------------------------
# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤—ã–¥–∞—á–∏
# ---------------------------
with col_right:
    st.subheader("–í—ã—Ö–æ–¥–Ω–æ–π —Ñ–æ—Ä–º–∞—Ç")
    out_fmt = st.radio("–§–æ—Ä–º–∞—Ç –≤—ã–¥–∞—á–∏", options=["HTML", "Plain/Markdown"], index=0)
    download_as = st.selectbox("–°–∫–∞—á–∞—Ç—å —Ç–µ–∫—Å—Ç –∫–∞–∫", options=["TXT", "HTML", "MD"])
    run = st.button("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –≥—É–º–∞–Ω–∏–∑–∞—Ü–∏—é (Ryne)", type="primary")

# ---------------------------
# –í—ã–∑–æ–≤ Ryne
# ---------------------------
def call_ryne_humanize(text: str, output_format: str) -> str:
    """
    –®–∞–±–ª–æ–Ω –∑–∞–ø—Ä–æ—Å–∞ –∫ Ryne.
    !!! –ü—Ä–æ–≤–µ—Ä—å —Ñ–∞–∫—Ç–∏—á–µ—Å–∫—É—é —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—é —É Ryne –∏ –ø–æ–ø—Ä–∞–≤—å payload/headers !!!
    """
    if not api_base or not endpoint:
        raise RuntimeError("–ù–µ –∑–∞–¥–∞–Ω API Base URL –∏–ª–∏ endpoint.")

    url = api_base.rstrip("/") + "/" + endpoint.lstrip("/")
    headers = {"Content-Type": "application/json"}
    if api_key:
        headers["Authorization"] = f"Bearer {api_key}"

    payload = {req_text_field: text, req_format_field: ("html" if output_format == "HTML" else "text")}
    # –î–æ–ø. –ø–æ–ª—è, –µ—Å–ª–∏ –∑–∞–¥–∞–Ω—ã
    if req_extra_json.strip():
        try:
            payload.update(json.loads(req_extra_json))
        except Exception as e:
            st.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –î–æ–ø. JSON-–ø–æ–ª—è: {e}")

    resp = requests.post(url, json=payload, timeout=60, headers=headers)
    if resp.status_code != 200:
        raise RuntimeError(f"Ryne –≤–µ—Ä–Ω—É–ª {resp.status_code}: {resp.text[:500]}")
    # –ü—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º, —á—Ç–æ Ryne –æ—Ç–¥–∞—ë—Ç –ü–õ–û–°–ö–ò–ô —Ç–µ–∫—Å—Ç (string).
    # –ï—Å–ª–∏ –ø—Ä–∏—Ö–æ–¥–∏—Ç JSON ‚Äî –ø–æ–¥—Å—Ç—Ä–æ–π—Å—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, resp.json()['result'])
    try:
        # –µ—Å–ª–∏ –≤–¥—Ä—É–≥ –ø—Ä–∏—à—ë–ª JSON —Å –∫–ª—é—á–æ–º result
        j = resp.json()
        if isinstance(j, dict) and "result" in j:
            return str(j["result"])
        # –∏–ª–∏ –µ—Å–ª–∏ —Å—Ä–∞–∑—É text
        if isinstance(j, dict) and "text" in j:
            return str(j["text"])
        # –µ—Å–ª–∏ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ ‚Äî –≤–µ—Ä–Ω—ë–º –∫–∞–∫ —Å—Ç—Ä–æ–∫—É
        return json.dumps(j, ensure_ascii=False)
    except Exception:
        return resp.text

# ---------------------------
# –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ HTML (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
# ---------------------------
def wrap_as_html(text: str) -> str:
    """–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç HTML, –Ω–æ –ø—Ä–∏—à—ë–ª –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç ‚Äî –æ–±–æ—Ä–∞—á–∏–≤–∞–µ–º –≤ –ø—Ä–æ—Å—Ç–æ–π HTML."""
    soup = BeautifulSoup("", "html.parser")
    body = soup.new_tag("div")
    for para in text.split("\n"):
        p = soup.new_tag("p")
        p.string = para.strip()
        body.append(p)
    return str(body)

def replace_text_nodes_keep_tags(html: str, new_text: str) -> str:
    """
    –í–∞—Ä–∏–∞–Ω—Ç: –µ—Å–ª–∏ –Ω–∞ –≤—Ö–æ–¥–µ HTML, –∞ Ryne –≤–µ—Ä–Ω—É–ª plain-—Ç–µ–∫—Å—Ç —Ç–∞–∫–æ–≥–æ –∂–µ –æ–±—ä—ë–º–∞ ‚Äî 
    –º–æ–∂–Ω–æ –ø—Ä–æ—Å—Ç–æ –∑–∞–º–µ–Ω–∏—Ç—å –≤–µ—Å—å —Ç–µ–∫—Å—Ç (—É–ø—Ä–æ—â–µ–Ω–∏–µ).
    –ë–æ–ª–µ–µ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –æ–±—Ö–æ–¥ —Å —Ä–∞–∑–±–æ—Ä–æ–º –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —É–∑–ª–æ–≤ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏.
    """
    # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é ‚Äî –æ–±–æ—Ä–∞—á–∏–≤–∞–µ–º –∫–∞–∫ –±–ª–æ–∫ <div> —Å –Ω–æ–≤—ã–º —Ç–µ–∫—Å—Ç–æ–º
    return wrap_as_html(new_text)

# ---------------------------
# –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫
# ---------------------------
if run:
    if not source_text.strip():
        st.warning("–ù—É–∂–Ω–æ –≤—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç/HTML –∏–ª–∏ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª.")
    else:
        with st.spinner("–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —á–µ—Ä–µ–∑ Ryne‚Ä¶"):
            try:
                result = call_ryne_humanize(source_text, out_fmt)

                # –ü—Ä–µ–≤—å—é –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —Å–∫–∞—á–∏–≤–∞–Ω–∏—é
                final_html = None
                final_plain = None

                # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—Ä–æ—Å–∏–ª HTML:
                if out_fmt == "HTML":
                    # –ï—Å–ª–∏ –∏—Å—Ö–æ–¥–Ω–∏–∫ –±—ã–ª HTML ‚Äî –ø–æ–ø—ã—Ç–∞–µ–º—Å—è –æ—Ç—Ä–∏—Å–æ–≤–∞—Ç—å –∫–∞–∫ HTML.
                    if (uploaded_kind == "html") or ("<html" in source_text.lower() or "<p" in source_text.lower()):
                        # –ï—Å–ª–∏ Ryne –≤–µ—Ä–Ω—É–ª HTML ‚Äî –ø–æ–∫–∞–∂–µ–º –∫–∞–∫ –µ—Å—Ç—å, –∏–Ω–∞—á–µ –∑–∞–≤–µ—Ä–Ω—ë–º –≤ –ø—Ä–æ—Å—Ç–æ–π HTML
                        if "<" in result and ">" in result:
                            final_html = result
                        else:
                            final_html = replace_text_nodes_keep_tags(source_text, result)
                    else:
                        # –ò—Å—Ö–æ–¥–Ω–∏–∫ –±—ã–ª —Ç–µ–∫—Å—Ç–æ–º: –ø—Ä–µ–≤—Ä–∞—â–∞–µ–º –≤ –ø—Ä–æ—Å—Ç–æ–π HTML-–±–ª–æ–∫
                        if "<" in result and ">" in result:
                            final_html = result
                        else:
                            final_html = wrap_as_html(result)

                    st.success("–ì–æ—Ç–æ–≤–æ! –ù–∏–∂–µ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä HTML.")
                    st.components.v1.html(final_html, height=400, scrolling=True)

                else:
                    # Plain/Markdown –≤—ã–≤–æ–¥–∏–º –∫–∞–∫ –µ—Å—Ç—å
                    final_plain = result
                    st.success("–ì–æ—Ç–æ–≤–æ! –ù–∏–∂–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç (Plain/Markdown).")
                    st.text_area("–†–µ–∑—É–ª—å—Ç–∞—Ç", value=final_plain, height=300)

                # –ö–Ω–æ–ø–∫–∞ ¬´–°–∫–∞—á–∞—Ç—å¬ª
                fname = "result"
                if download_as == "HTML":
                    data = (final_html or wrap_as_html(final_plain or "")).encode("utf-8")
                    st.download_button("‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å HTML", data=data, file_name=f"{fname}.html", mime="text/html")
                elif download_as == "MD":
                    data = (final_plain or "").encode("utf-8")
                    st.download_button("‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å MD", data=data, file_name=f"{fname}.md", mime="text/markdown")
                else:
                    data = (final_plain or BeautifulSoup(final_html or "", "html.parser").get_text()).encode("utf-8")
                    st.download_button("‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å TXT", data=data, file_name=f"{fname}.txt", mime="text/plain")

            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ Ryne: {e}")
                st.stop()

# –ü–æ–¥–ø–∏—Å—å/–ø–æ–¥—Å–∫–∞–∑–∫–∏
st.caption("–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–æ–µ. –£—Ç–æ—á–Ω–∏ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–π —Ñ–æ—Ä–º–∞—Ç API —É Ryne –∏ –ø–æ–¥–ø—Ä–∞–≤—å –ø–æ–ª—è –∑–∞–ø—Ä–æ—Å–∞ –≤ —Å–∞–π–¥–±–∞—Ä–µ.")
