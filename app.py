from __future__ import annotations

import io
import json
import re
import tempfile
from typing import Dict, Tuple

import os
import requests
import streamlit as st
from bs4 import BeautifulSoup, NavigableString, Tag

# --- –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã –¥–ª—è –æ—Ñ–∏—Å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ ---
try:
    from docx import Document  # .docx
except Exception:
    Document = None

try:
    import textract  # .doc (–µ—Å–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏ –µ—Å—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏)
except Exception:
    textract = None

# ----------------------------
# –ö–ª—é—á –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Ryne API –∏–∑ Streamlit Secrets / –æ–∫—Ä—É–∂–µ–Ω–∏—è
# ----------------------------
RYNE_API_KEY = st.secrets.get("RYNE_API_KEY") or os.getenv("RYNE_API_KEY", "")
# –ú–æ–∂–Ω–æ –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å URL —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞ –≤ secrets: RYNE_API_URL = "https://ryne.ai/humanize"
RYNE_API_URL = st.secrets.get("RYNE_API_URL", os.getenv("RYNE_API_URL", "https://ryne.ai/humanize"))

# –ù–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –ø–æ–ª—è –≤ API –æ—Ç–ª–∏—á–∞—é—Ç—Å—è, –º–æ–∂–Ω–æ –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∏—Ö —á–µ—Ä–µ–∑ secrets
RYNE_INPUT_FIELD = st.secrets.get("RYNE_INPUT_FIELD", os.getenv("RYNE_INPUT_FIELD", "input"))
RYNE_FORMAT_FIELD = st.secrets.get("RYNE_FORMAT_FIELD", os.getenv("RYNE_FORMAT_FIELD", "format"))
RYNE_OUTPUT_FIELD = st.secrets.get("RYNE_OUTPUT_FIELD", os.getenv("RYNE_OUTPUT_FIELD", "output"))

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫ –∑–∞–ø—Ä–æ—Å—É (JSON), –µ—Å–ª–∏ –Ω—É–∂–Ω—ã
_extra_params_raw = st.secrets.get("RYNE_EXTRA_PARAMS", os.getenv("RYNE_EXTRA_PARAMS", ""))
try:
    RYNE_EXTRA_PARAMS = json.loads(_extra_params_raw) if _extra_params_raw else {}
except Exception:
    RYNE_EXTRA_PARAMS = {}

# ----------------------------
# –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ
# ----------------------------
st.set_page_config(page_title="Humanizer ‚Äî Ryne API", page_icon="üõ†Ô∏è", layout="wide")
st.title("üõ†Ô∏è Humanizer (Ryne API)")

# ----------------------------
# –•–µ–ª–ø–µ—Ä—ã
# ----------------------------
def is_html(text: str) -> bool:
    if not text:
        return False
    has_tag = bool(re.search(r"<([a-zA-Z][^>]*?)>", text))
    has_angle = "</" in text or "/>" in text
    return has_tag and has_angle


def _word_count(s: str) -> int:
    tokens = re.findall(r"\w+", s, flags=re.UNICODE)
    return len(tokens)


def append_words_marker_to_html(html: str, n: int) -> str:
    """–î–æ–±–∞–≤–ª—è–µ—Ç –≤ –∫–æ–Ω–µ—Ü HTML –≤–∏–¥–∏–º—ã–π –º–∞—Ä–∫–µ—Ä [Words: N] –∫–∞–∫ –ø–æ—Å–ª–µ–¥–Ω–∏–π <p>."""
    try:
        soup = BeautifulSoup(html, "lxml")
        container = soup.body or soup
        p = soup.new_tag("p")
        p.string = f"[Words: {n}]"
        container.append(p)
        return str(soup)
    except Exception:
        return f"{html}\n[Words: {n}]"


# ----------------------------
# –û–±—ë—Ä—Ç–∫–∞ –Ω–∞–¥ Ryne /humanize
# ----------------------------
def ryne_humanize(text: str, output_format: str = "text") -> str:
    """
    –í—ã–∑—ã–≤–∞–µ—Ç Ryne /humanize –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç.
    output_format: "text" | "html"

    –ü–æ–ª—è –∑–∞–ø—Ä–æ—Å–∞/–æ—Ç–≤–µ—Ç–∞ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—é—Ç—Å—è —á–µ—Ä–µ–∑ —Å–µ–∫—Ä–µ—Ç—ã RYNE_*_FIELD.
    –î–æ–ø. –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –º–æ–∂–Ω–æ –ø–µ—Ä–µ–¥–∞—Ç—å —á–µ—Ä–µ–∑ RYNE_EXTRA_PARAMS (JSON –≤ secrets).
    """
    if not RYNE_API_KEY:
        raise RuntimeError(
            "–ù–µ –Ω–∞–π–¥–µ–Ω RYNE_API_KEY. –£–∫–∞–∂–∏—Ç–µ –µ–≥–æ –≤ Streamlit secrets –∏–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è."
        )

    headers = {
        "Authorization": f"Bearer {RYNE_API_KEY}",
        "Content-Type": "application/json",
        "Accept": "application/json",
    }

    payload: Dict[str, object] = {
        RYNE_INPUT_FIELD: text,
        RYNE_FORMAT_FIELD: output_format,
    }
    # –ü–æ–¥–º–µ—à–∏–≤–∞–µ–º –ª—é–±—ã–µ –¥–æ–ø. –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    if isinstance(RYNE_EXTRA_PARAMS, dict):
        payload.update(RYNE_EXTRA_PARAMS)

    resp = requests.post(RYNE_API_URL, headers=headers, json=payload, timeout=120)

    # –ë—Ä–æ—Å–∞–µ–º –æ—Å–º—ã—Å–ª–µ–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏
    try:
        resp.raise_for_status()
    except requests.HTTPError as http_err:
        try:
            err_json = resp.json()
        except Exception:
            err_json = {"detail": resp.text[:500]}
        raise RuntimeError(f"Ryne API –æ—à–∏–±–∫–∞ {resp.status_code}: {err_json}") from http_err

    data = resp.json() if resp.content else {}

    # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –æ—Ç–≤–µ—Ç –≥–∏–±–∫–æ
    if isinstance(data, dict):
        # –æ—Å–Ω–æ–≤–Ω–æ–π –ø—É—Ç—å —á–µ—Ä–µ–∑ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º–æ–µ –∏–º—è –ø–æ–ª—è
        out = data.get(RYNE_OUTPUT_FIELD)
        if out:
            return str(out)
        # —á–∞—Å—Ç–æ –≤—Å—Ç—Ä–µ—á–∞—é—â–∏–µ—Å—è –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã
        for key in ("result", "data", "text", "html"):
            if key in data:
                val = data[key]
                # –µ—Å–ª–∏ data -> –≤–Ω—É—Ç—Ä–∏ –º–æ–∂–µ—Ç –ª–µ–∂–∞—Ç—å output
                if isinstance(val, dict):
                    return str(val.get("output") or val.get("text") or val.get("html") or "")
                return str(val)

    # –µ—Å–ª–∏ –Ω–µ —Ä–∞–∑–æ–±—Ä–∞–ª–∏—Å—å ‚Äî –ø—Ä–æ–±—É–µ–º –∫–∞–∫ –µ—Å—Ç—å
    return resp.text


# ----------------------------
# –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤
# ----------------------------
def read_text_file(uploaded) -> str:
    raw = uploaded.read().decode("utf-8", errors="ignore")
    return raw


def read_docx_file(uploaded) -> str:
    if Document is None:
        raise RuntimeError("–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–∞–∫–µ—Ç python-docx. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install python-docx")
    uploaded.seek(0)
    doc = Document(uploaded)
    blocks = []
    for p in doc.paragraphs:
        blocks.append(p.text)
    for table in doc.tables:
        for row in table.rows:
            blocks.append("\t".join(cell.text for cell in row.cells))
    return "\n".join(block for block in blocks if block is not None)


def read_doc_file(uploaded) -> str:
    if textract is None:
        raise RuntimeError("–î–ª—è —á—Ç–µ–Ω–∏—è .doc —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ textract: pip install textract")
    uploaded.seek(0)
    with tempfile.NamedTemporaryFile(suffix=".doc", delete=True) as tmp:
        tmp.write(uploaded.read())
        tmp.flush()
        data = textract.process(tmp.name)
    return data.decode("utf-8", errors="ignore")


# ----------------------------
# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∫–∞—á–∏–≤–∞–µ–º—ã—Ö —Ñ–∞–π–ª–æ–≤
# ----------------------------
def build_docx_bytes(plain_text: str) -> bytes:
    if Document is None:
        raise RuntimeError("–î–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ .docx —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ python-docx: pip install python-docx")
    doc = Document()
    for para in plain_text.split("\n"):
        doc.add_paragraph(para)
    bio = io.BytesIO()
    doc.save(bio)
    return bio.getvalue()


# ----------------------------
# UI: –≤–≤–æ–¥ –∏ –≤—ã—Ö–æ–¥–Ω–æ–π —Ñ–æ—Ä–º–∞—Ç
# ----------------------------
col_in, col_opts = st.columns([2, 1], gap="large")

with col_in:
    st.markdown("#### –í—Å—Ç–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –∏–ª–∏ HTML")
    input_text = st.text_area(
        "–í—Ö–æ–¥–Ω–æ–π —Ç–µ–∫—Å—Ç",
        height=280,
        placeholder="–í—Å—Ç–∞–≤—å—Ç–µ —Å—é–¥–∞ –≤–∞—à —Ç–µ–∫—Å—Ç / HTML. –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–µ—Ä–Ω—ë—Ç Ryne /humanize.",
        label_visibility="collapsed",
    )
    uploaded = st.file_uploader(
        "‚Ä¶–∏–ª–∏ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª (.html, .txt, .md, .docx, .doc)",
        type=["html", "txt", "md", "docx", "doc"],
        accept_multiple_files=False
    )
    if uploaded is not None and not input_text:
        ext = (uploaded.name.split(".")[-1] or "").lower()
        try:
            if ext in {"html", "htm"}:
                input_text = read_text_file(uploaded)
            elif ext in {"txt", "md"}:
                input_text = read_text_file(uploaded)
            elif ext == "docx":
                input_text = read_docx_file(uploaded)
            elif ext == "doc":
                input_text = read_doc_file(uploaded)
            else:
                st.error("–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞.")
        except Exception as e:
            st.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª: {e}")

with col_opts:
    st.markdown("#### –í—ã—Ö–æ–¥–Ω–æ–π —Ñ–æ—Ä–º–∞—Ç")
    out_format = st.radio("–§–æ—Ä–º–∞—Ç –≤—ã–¥–∞—á–∏", ["HTML", "Plain/Markdown"], index=0, horizontal=True)
    text_download_fmt = st.selectbox("–°–∫–∞—á–∞—Ç—å —Ç–µ–∫—Å—Ç –∫–∞–∫", ["TXT", "MD", "DOCX"], index=0, help="–ü—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è, –∫–æ–≥–¥–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç ‚Äî —Ç–µ–∫—Å—Ç.")
    st.markdown("#### –û–±—Ä–∞–±–æ—Ç–∞—Ç—å")
    go = st.button("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ö—É–º–∞–Ω–∏–∑–∞—Ü–∏—é (Ryne)", type="primary", use_container_width=True)

# ----------------------------
# –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞
# ----------------------------
if go:
    if not input_text or not input_text.strip():
        st.error("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—Å—Ç–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –∏–ª–∏ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª.")
    elif not RYNE_API_KEY:
        st.error(
            "–ù–µ –Ω–∞–π–¥–µ–Ω RYNE_API_KEY. –£–∫–∞–∂–∏—Ç–µ –µ–≥–æ –≤ Streamlit secrets (Settings ‚Üí Secrets) –∏–ª–∏ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è."
        )
    else:
        try:
            with st.spinner("–û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Ryne /humanize‚Ä¶"):
                # –í—ã–∑—ã–≤–∞–µ–º –æ–¥–∏–Ω —ç–Ω–¥–ø–æ–∏–Ω—Ç —Å –Ω—É–∂–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º
                if out_format == "HTML":
                    result = ryne_humanize(input_text, output_format="html")
                    out_kind = "html"
                else:
                    result = ryne_humanize(input_text, output_format="text")
                    out_kind = "txt"

            # –î–æ–±–∞–≤–ª—è–µ–º [Words: N] –ª–æ–∫–∞–ª—å–Ω–æ, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
            try:
                if out_kind == "html":
                    visible_text = BeautifulSoup(result, "lxml").get_text(separator=" ").strip()
                    words_n = _word_count(visible_text)
                    if not re.search(r"\[Words:\s*\d+\]\s*$", result):
                        result = append_words_marker_to_html(result, words_n)
                else:
                    words_n = _word_count(result)
                    if not re.search(r"\[Words:\s*\d+\]\s*$", result):
                        result = f"{result}\n[Words: {words_n}]"
            except Exception:
                pass

            # –í—ã–≤–æ–¥ –∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ
            st.success("–ì–æ—Ç–æ–≤–æ!")
            if out_kind == "html":
                st.markdown("–ü—Ä–æ—Å–º–æ—Ç—Ä HTML:")
                st.components.v1.html(result, height=600, scrolling=True)
                st.download_button(
                    label="‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å .html",
                    data=result.encode("utf-8"),
                    file_name="humanized.html",
                    mime="text/html",
                )
                with st.expander("–ü–æ–∫–∞–∑–∞—Ç—å HTML-–∫–æ–¥"):
                    st.code(result, language="html")
            else:
                st.markdown("–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Ç–µ–∫—Å—Ç–∞:")
                st.text_area("–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Ç–µ–∫—Å—Ç–∞", value=result, height=400, label_visibility="collapsed")

                fmt = text_download_fmt.upper()
                if fmt == "TXT":
                    st.download_button(
                        label="‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å .txt",
                        data=result.encode("utf-8"),
                        file_name="humanized.txt",
                        mime="text/plain",
                    )
                elif fmt == "MD":
                    st.download_button(
                        label="‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å .md",
                        data=result.encode("utf-8"),
                        file_name="humanized.md",
                        mime="text/markdown",
                    )
                elif fmt == "DOCX":
                    try:
                        docx_bytes = build_docx_bytes(result)
                        st.download_button(
                            label="‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å .docx",
                            data=docx_bytes,
                            file_name="humanized.docx",
                            mime="application/vnd.openxmlformats-officedocument.wordprocessingml.document",
                        )
                    except Exception as e:
                        st.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å .docx: {e}")
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")
